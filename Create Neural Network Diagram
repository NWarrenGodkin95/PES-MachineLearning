Use the code below to create a coloured neural network diagram (for colour bar, please see full source code for additional code).
The colours are normalized, depending on the weights of the neurons and neuron connections, but a simple black and white diagram can be made too (see instructions below).

# n = layer
# m = neuron
# o = neuron to neuron connection line

def draw_neural_net(ax, left, right, bottom, top, layer_sizes):
    '''
    Draw a neural network cartoon using matplotilb.
    
    :usage:
        >>> fig = plt.figure(figsize=(12, 12))
        >>> draw_neural_net(fig.gca(), .1, .9, .1, .9, [1, 100, 200, 100, 50, 1])
    
    :parameters:
        - ax : matplotlib.axes.AxesSubplot
            The axes on which to plot the cartoon (get e.g. by plt.gca())
        - left : float
            The center of the leftmost node(s) will be placed here
        - right : float
            The center of the rightmost node(s) will be placed here
        - bottom : float
            The center of the bottommost node(s) will be placed here
        - top : float
            The center of the topmost node(s) will be placed here
        - layer_sizes : list of int
            List of layer sizes, including input and output dimensionality
    '''
    n_layers = len(layer_sizes)
    v_spacing = (top - bottom)/float(max(layer_sizes))
    h_spacing = (right - left)/float(len(layer_sizes) - 1)
    
    weight=[]
    connection =[]
    
    # Define weights    
    for i in range(len(model.layers)):
        weight.append(model.layers[i].get_weights()[1]) # Input Layer Weight

    for i in range(1,len(model.layers)):
      # Don't need the first connection as this is the input vector 
        connection.append(model.layers[i].get_weights()[0])
    
        print("neurons",weight)
        print("connections",connection)
        
        cmap = plt.cm.winter
        norm = matplotlib.colors.Normalize(vmin=-2, vmax=2)

    # Neurons
    for interations in range(1, 1000):
        for n, layer_size in enumerate(layer_sizes):
            layer_top = v_spacing*(layer_size - 1)/2. + (top + bottom)/2.
            for m in range(layer_size):
                circle = plt.Circle((n*h_spacing + left, layer_top - m*v_spacing), v_spacing/4., color=cmap(norm(m)))
                ax.add_artist(circle)
       
    
    # Connections
    for iterations in range(1, 1000):
        for n, (layer_size_a, layer_size_b) in enumerate(zip(layer_sizes[:-1], layer_sizes[1:])):
            layer_top_a = v_spacing*(layer_size_a - 1)/2. + (top + bottom)/2.
            layer_top_b = v_spacing*(layer_size_b - 1)/2. + (top + bottom)/2.
            for m in range(layer_size_a):
                for o in range(layer_size_b):
                    line = plt.Line2D([n*h_spacing + left, (n + 1)*h_spacing + left],
                                          [layer_top_a - m*v_spacing, layer_top_b - o*v_spacing], color=cmap(norm(o)))
                    ax.add_artist(line)
                    
    plt.figure(1)
    fig = plt.figure(figsize=(20, 20)) #Change image size - will not work over 800x800.
    ax = fig.gca()
    ax.axis('off')
    plt.title('Neural Network Architecture, fontsize=30)
    draw_neural_net(ax, .1, .9, .1, .9, [1, 100, 200, 100, 50, 1]) #Change square bracket numbers for different neuron amount in each layer.
    
For a black and white image of the neural network diagram, remove the cmap (line 48-49). For the neurons, replace "color=cmap(norm(m)))" with color="w", ec="k" in line 56. Replace the connections colour "color=cmap(norm(o))) with color="k" in line 68.
